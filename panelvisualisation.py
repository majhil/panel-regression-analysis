# -*- coding: utf-8 -*-
"""panelVisualisation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19S3ZlR8P15DSqA8WkT2iPlsirMYW7kB2
"""

pip install pandas geopandas matplotlib openpyxl

!pip install contextily

pip install plotly

pip install plotly pandas openpyxl ipywidgets

pip install leafmap geopandas openpyxl

!pip install mapclassify

import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import contextily as ctx


df = pd.read_excel("/content/blueprint5.xlsx", sheet_name="Sheet1")

!wget https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip
!unzip ne_110m_admin_0_countries.zip

world = gpd.read_file("ne_110m_admin_0_countries.shp")

df = df.rename(columns={"Code": "iso_a3", "Life_Expectancy": "life_expectancy"})
gdp_data = df[(df["Year"] >= 2013) & (df["Year"] <= 2023)]

years = sorted(gdp_data["Year"].unique())
fig, axes = plt.subplots(nrows=3, ncols=4, figsize=(20, 12)) # Remove constrained_layout=True
axes = axes.flatten()


for i, year in enumerate(years):
    ax = axes[i]
    year_data = gdp_data[gdp_data["Year"] == year]
    merged = world.merge(year_data, how="left", left_on="ISO_A3", right_on="iso_a3") # Changed left_on to 'ISO_A3' to match the column name in the downloaded shapefile
    merged.plot(column="life_expectancy", cmap="hsv", linewidth=0.5, ax=ax, edgecolor='0.8', legend=True, vmin=0,vmax=90)  # Fixed minimum for color scale
    ax.set_title(f"Life expectancy ({year})")
    ax.axis("off")

plt.suptitle("Global Life Expectancy (2013–2023)", fontsize=18)
plt.tight_layout()
plt.show()

import pandas as pd
import geopandas as gpd
import plotly.express as px

df = pd.read_excel("blueprint5.xlsx", sheet_name="Sheet1")

df = df.rename(columns={"Code": "iso_a3", "Life_Expectancy": "life_expectancy"})
life_data = df[(df["Year"] >= 2013) & (df["Year"] <= 2024)]

fig = px.choropleth(
    life_data,
    locations="iso_a3",
    color="life_expectancy",
    hover_name="Country",
    animation_frame="Year",
    color_continuous_scale="Earth",
    title="Global Life Expectancy (2013–2023)",
    labels={"life_expectancy": "Life Expectancy"},
    range_color=(0,90)
)

fig.update_geos(showcountries=True, showcoastlines=True, showland=True, fitbounds="locations")
fig.update_layout(margin={"r":0,"t":50,"l":0,"b":0})
fig.write_html("global_gdp_per_capita_2013_2023.html")
fig.show()

import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt

df = pd.read_excel("blueprint5.xlsx", sheet_name="Sheet1")

!wget https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip
!unzip ne_110m_admin_0_countries.zip

world = gpd.read_file("ne_110m_admin_0_countries.shp")

df = df.rename(columns={"Code": "iso_a3", "Life_Expectancy": "life_expectancy"})
life_data = df[(df["Year"] >= 2013) & (df["Year"] <= 2023)]

years = sorted(life_data["Year"].unique())


for year in years:
    year_data = life_data[life_data["Year"] == year]
    merged = world.merge(year_data, how="left", left_on="ISO_A3", right_on="iso_a3")

    fig, ax = plt.subplots(figsize=(14, 8))
    merged.plot(column="life_expectancy",
                cmap="hsv",
                linewidth=0.5,
                ax=ax,
                edgecolor='0.8', vmin=0,vmax=90,
                legend=True,
                missing_kwds={
                    "color": "lightgrey",
                    "label": "No data"
                })

    ax.set_title(f"Global Life Expectancy ({year})", fontsize=18)
    ax.axis("off")
    plt.tight_layout()
    plt.show()

import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt
import contextily as ctx


df = pd.read_excel("/content/blueprint5.xlsx", sheet_name="Sheet1")

!wget https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip
!unzip ne_110m_admin_0_countries.zip

world = gpd.read_file("ne_110m_admin_0_countries.shp")

df = df.rename(columns={"Code": "iso_a3", "GDP_per_capita": "gdp_per_capita"})
gdp_data = df[(df["Year"] >= 2013) & (df["Year"] <= 2023)]

years = sorted(gdp_data["Year"].unique())
fig, axes = plt.subplots(nrows=3, ncols=4, figsize=(20, 12)) # Remove constrained_layout=True
axes = axes.flatten()

for i, year in enumerate(years):
    ax = axes[i]
    year_data = gdp_data[gdp_data["Year"] == year]
    merged = world.merge(year_data, how="left", left_on="ISO_A3", right_on="iso_a3") # Changed left_on to 'ISO_A3' to match the column name in the downloaded shapefile
    merged.plot(column="gdp_per_capita", cmap="viridis", linewidth=0.5, ax=ax, edgecolor='0.8', legend=True)
    ax.set_title(f"GDP per Capita ({year})")
    ax.axis("off")

plt.suptitle("Global GDP per Capita (2013–2023)", fontsize=18)
plt.tight_layout()
plt.show()

import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt

df = pd.read_excel("blueprint5.xlsx", sheet_name="Sheet1")

!wget https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip
!unzip ne_110m_admin_0_countries.zip

world = gpd.read_file("ne_110m_admin_0_countries.shp")

df = df.rename(columns={"Code": "iso_a3", "GDP_per_capita": "gdp_per_capita"})
gdp_data = df[(df["Year"] >= 2013) & (df["Year"] <= 2023)]

years = sorted(gdp_data["Year"].unique())


for year in years:
    year_data = gdp_data[gdp_data["Year"] == year]
    merged = world.merge(year_data, how="left", left_on="ISO_A3", right_on="iso_a3")

    fig, ax = plt.subplots(figsize=(14, 8))
    merged.plot(column="gdp_per_capita",
                cmap="hsv",
                linewidth=0.5,
                ax=ax,
                edgecolor='0.8',
                legend=True,
                missing_kwds={
                    "color": "lightgrey",
                    "label": "No data"
                })

    ax.set_title(f"Global GDP per Capita ({year})", fontsize=18)
    ax.axis("off")
    plt.tight_layout()
    plt.show()

import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt

df = pd.read_excel("blueprint5.xlsx", sheet_name="Sheet1")

!wget https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip
!unzip ne_110m_admin_0_countries.zip

world = gpd.read_file("ne_110m_admin_0_countries.shp")

df = df.rename(columns={"Code": "iso_a3", "GDP_per_capita": "gdp_per_capita"})
gdp_data = df[(df["Year"] >= 2013) & (df["Year"] <= 2023)]

years = sorted(gdp_data["Year"].unique())

for year in years:
    year_data = gdp_data[gdp_data["Year"] == year]
    # Changed 'left_on' to 'ISO_A3' to match the column name in the shapefile
    merged = world.merge(year_data, how="left", left_on="ISO_A3", right_on="iso_a3")

    fig, ax = plt.subplots(figsize=(14, 8))
    merged.plot(column="gdp_per_capita",
                cmap="OrRd",
                linewidth=0.5,
                ax=ax,
                edgecolor='0.8',
                legend=True,
                missing_kwds={
                    "color": "lightgrey",
                    "edgecolor": "red",
                    "hatch": "...",
                    "label": "No data"
                })

    ax.set_title(f"Global GDP per Capita ({year})", fontsize=18)
    ax.axis("off")
    plt.tight_layout()
    plt.show()

import pandas as pd
import geopandas as gpd
import plotly.express as px

df = pd.read_excel("blueprint5.xlsx", sheet_name="Sheet1")

df = df.rename(columns={"Code": "iso_a3", "GDP_per_capita": "gdp_per_capita"})
gdp_data = df[(df["Year"] >= 2013) & (df["Year"] <= 2024)]

fig = px.choropleth(
    gdp_data,
    locations="iso_a3",
    color="gdp_per_capita",
    hover_name="Country",
    animation_frame="Year",
    color_continuous_scale="Earth",
    title="Global GDP per Capita (2013–2023)",
    labels={"gdp_per_capita": "GDP per Capita"},
    range_color=(gdp_data["gdp_per_capita"].min(), gdp_data["gdp_per_capita"].max())
)

fig.update_geos(showcountries=True, showcoastlines=True, showland=True, fitbounds="locations")
fig.update_layout(margin={"r":0,"t":50,"l":0,"b":0})
fig.write_html("global_gdp_per_capita_2013_2023.html")
fig.show()

import pandas as pd
import geopandas as gpd
import plotly.express as px

df = pd.read_excel("blueprint5.xlsx", sheet_name="Sheet1")

df = df.rename(columns={"Code": "iso_a3", "GDP_per_capita": "gdp_per_capita"})
gdp_data = df[(df["Year"] >= 2013) & (df["Year"] <= 2023)]

fig = px.choropleth(
    gdp_data,
    locations="iso_a3",
    color="gdp_per_capita",
    hover_name="Country",
    animation_frame="Year",
    color_continuous_scale="hsv",
    title="Global GDP per Capita (2013–2023)",
    labels={"gdp_per_capita": "GDP per Capita"},
    range_color=(gdp_data["gdp_per_capita"].min(), gdp_data["gdp_per_capita"].max())
)

fig.update_geos(showcountries=True, showcoastlines=True, showland=True, fitbounds="locations")
fig.update_layout(margin={"r":0,"t":50,"l":0,"b":0})
fig.show()

import pandas as pd
import geopandas as gpd
import leafmap.foliumap as leafmap

df = pd.read_excel("blueprint5.xlsx", sheet_name="Sheet4")
df = df.rename(columns={"Code": "iso_a3", "GDP_per_capita": "gdp_per_capita"})

year = 2023
gdp_data = df[df["Year"] == year]

!wget https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip
!unzip ne_110m_admin_0_countries.zip

world = gpd.read_file("ne_110m_admin_0_countries.shp")

print(world.columns)

merged = gdp_data.merge(world[['ISO_A3', 'geometry']], left_on="iso_a3", right_on="ISO_A3", how="left")
merged = gpd.GeoDataFrame(merged, geometry='geometry', crs=world.crs) # Set geometry & CRS

geojson_path = "gdp_2023.geojson"
merged.to_file(geojson_path, driver="GeoJSON")

m = leafmap.Map(center=[20, 0], zoom=2)
m.add_basemap("Esri.WorldImagery")  # Other options: "OpenStreetMap", "Esri.WorldImagery","CartoDB.Positron" etc.

m.add_data(
    geojson_path,
    layer_name=f"GDP per Capita {year}",
    info_mode="on_hover",
    style={"fillOpacity": 0.7},
    color_column="gdp_per_capita",
    color_scheme="YlGnBu",
    column='gdp_per_capita'
)

m

import pandas as pd
import geopandas as gpd
import leafmap.foliumap as leafmap

df = pd.read_excel("blueprint5.xlsx", sheet_name="Sheet4")
df = df.rename(columns={"Code": "iso_a3", "GDP_per_capita": "gdp_per_capita"})

year = 2023
gdp_data = df[df["Year"] == year]

!wget https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip
!unzip ne_110m_admin_0_countries.zip

world = gpd.read_file("ne_110m_admin_0_countries.shp")

print(world.columns)

merged = gdp_data.merge(world[['ISO_A3', 'geometry']], left_on="iso_a3", right_on="ISO_A3", how="left")
merged = gpd.GeoDataFrame(merged, geometry='geometry', crs=world.crs) # Set geometry & CRS

geojson_path = "gdp_2023.geojson"
merged.to_file(geojson_path, driver="GeoJSON")

m = leafmap.Map(center=[20, 0], zoom=2)
m.add_basemap("CartoDB.Positron")  # Other options: "OpenStreetMap", "Esri.WorldImagery","CartoDB.Positron" etc.

m.add_data(
    geojson_path,
    layer_name=f"GDP per Capita {year}",
    info_mode="on_hover",
    style={"fillOpacity": 0.7},
    color_column="gdp_per_capita",
    color_scheme="YlGnBu",
    column='gdp_per_capita'
)

m

import pandas as pd
import geopandas as gpd
import leafmap.foliumap as leafmap

df = pd.read_excel("blueprint5.xlsx", sheet_name="Sheet4")
df = df.rename(columns={"Code": "iso_a3", "GDP_per_capita": "gdp_per_capita"})

year = 2023
gdp_data = df[df["Year"] == year]

!wget https://naturalearth.s3.amazonaws.com/110m_cultural/ne_110m_admin_0_countries.zip
!unzip ne_110m_admin_0_countries.zip

world = gpd.read_file("ne_110m_admin_0_countries.shp")

print(world.columns)

merged = gdp_data.merge(world[['ISO_A3', 'geometry']], left_on="iso_a3", right_on="ISO_A3", how="left")
merged = gpd.GeoDataFrame(merged, geometry='geometry', crs=world.crs) # Set geometry & CRS

geojson_path = "gdp_2023.geojson"
merged.to_file(geojson_path, driver="GeoJSON")

m = leafmap.Map(center=[20, 0], zoom=2)
m.add_basemap("SATELLITE")  # Other options: "OpenStreetMap", "Esri.WorldImagery","CartoDB.Positron" etc.

m.add_data(
    geojson_path,
    layer_name=f"GDP per Capita {year}",
    info_mode="on_hover",
    style={"fillOpacity": 0.7},
    color_column="gdp_per_capita",
    color_scheme="YlGnBu",
    column='gdp_per_capita'
)

m