# -*- coding: utf-8 -*-
"""panelRegressionAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GnTmCTZfy3nbixO_hoPZpdCh-3cQp1uE
"""

import numpy as np
import pandas as pd

df=pd.read_csv('/content/blueprint 3.1.csv')
df1=pd.read_csv('/content/developed.csv')
df2=pd.read_csv('/content/developing.csv')
df.head(30)

df.info()

df.isnull().sum()

df.describe()

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Assuming df is your DataFrame

# Select only numerical columns for correlation
numerical_df = df.select_dtypes(include=np.number)

# Calculate correlation matrix
correlation_matrix = numerical_df.corr()

# Visualize the correlation matrix using a heatmap
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1, center=0)
plt.title('Correlation Matrix of Variables')
plt.show()

# Print the correlation matrix
print("Correlation Matrix:")
print(correlation_matrix)

df.shape

df1.shape

df2.shape

df = df.set_index(['Code', 'Year'])
df1 = df1.set_index(['Code', 'Year'])
df2 = df2.set_index(['Code', 'Year'])

df.shape

import statsmodels.api as sm
import statsmodels.formula.api as smf
!pip install linearmodels
import linearmodels
from linearmodels.panel import PanelOLS
from linearmodels import RandomEffects
from scipy.stats import linregress

df.columns

pooled_ols = smf.ols('Life_Expectancy ~ Annual_CO2_emissions  + GDP_per_capita  + Infant_Mortality_Rate + Military_Expenditure + health_expenditure_per_capita', data=df).fit()
print(pooled_ols.summary())

pooled_ols = smf.ols('Life_Expectancy ~ Annual_CO2_emissions  + GDP_per_capita  + Infant_Mortality_Rate + Military_Expenditure + health_expenditure_per_capita', data=df1).fit()
print(pooled_ols.summary())

pooled_ols = smf.ols('Life_Expectancy ~ Annual_CO2_emissions  + GDP_per_capita  + Infant_Mortality_Rate + Military_Expenditure + health_expenditure_per_capita', data=df2).fit()
print(pooled_ols.summary())

from statsmodels.stats.diagnostic import het_breuschpagan
bp_test = het_breuschpagan(pooled_ols.resid, pooled_ols.model.exog)
print(bp_test)

from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.stats.outliers_influence import reset_ramsey
reset_test = reset_ramsey(pooled_ols, degree=2)
print(reset_test)

fe_model = PanelOLS.from_formula('Life_Expectancy ~ Annual_CO2_emissions  + GDP_per_capita  + Infant_Mortality_Rate + Military_Expenditure + health_expenditure_per_capita', data=df)
fe_result = fe_model.fit()
print(fe_result)

from linearmodels import RandomEffects
re_model1 = RandomEffects.from_formula('Life_Expectancy ~ Annual_CO2_emissions  + GDP_per_capita  + Infant_Mortality_Rate + Military_Expenditure + health_expenditure_per_capita', data=df)
re_result = re_model1.fit()
print(re_result)

from linearmodels.panel import compare
modelscompare = compare({'FE': fe_result, 'RE': re_result})
print("COMPARE THE RESULTS:", modelscompare)

from scipy import stats
from linearmodels.panel import PanelOLS, RandomEffects
b_fe = fe_result.params[['Annual_CO2_emissions','Military_Expenditure','GDP_per_capita', 'Infant_Mortality_Rate', 'health_expenditure_per_capita']]
b_re = re_result.params[['Annual_CO2_emissions','Military_Expenditure','GDP_per_capita', 'Infant_Mortality_Rate', 'health_expenditure_per_capita']]

beta_diff = b_fe - b_re

V_fe = fe_result.cov.iloc[:len(b_fe), :len(b_fe)]
V_re = re_result.cov.iloc[:len(b_re), :len(b_re)]

V_diff = V_fe - V_re

chi2_stat = np.dot(np.dot(beta_diff.T, np.linalg.inv(V_diff)), beta_diff)
df_len = len(b_fe)
p_value = 1 - stats.chi2.cdf(chi2_stat, df_len)

print("Hausman test statistic:", chi2_stat)
print("Degrees of freedom:", df_len)
print("P-value:", p_value)

if p_value <0.05:
  print("Reject the null hypothesis: Fixed Effects model is preferred")
else:
  print("Fail to reject the null hypothesis: Random Effects model is preffered")

from linearmodels import RandomEffects
re_model2 = RandomEffects(df['Life_Expectancy'], sm.add_constant(df[['Annual_CO2_emissions', 'Military_Expenditure','GDP_per_capita', 'Infant_Mortality_Rate', 'health_expenditure_per_capita']])).fit()
print(re_model2.summary)

from linearmodels import RandomEffects
#developed
re_model3 = RandomEffects(df1['Life_Expectancy'], sm.add_constant(df1[['Annual_CO2_emissions', 'Military_Expenditure','GDP_per_capita', 'Infant_Mortality_Rate', 'health_expenditure_per_capita']])).fit()
print(re_model3.summary)

from linearmodels import RandomEffects
#developing
re_model4 = RandomEffects(df2['Life_Expectancy'], sm.add_constant(df2[['Annual_CO2_emissions', 'Military_Expenditure','GDP_per_capita', 'Infant_Mortality_Rate', 'health_expenditure_per_capita']])).fit()
print(re_model4.summary)

from linearmodels import RandomEffects
re_model5 = RandomEffects.from_formula('Life_Expectancy ~ 1 + Annual_CO2_emissions + GDP_per_capita + Military_Expenditure + Infant_Mortality_Rate + health_expenditure_per_capita', data=df).fit()
print(re_model5.summary)

from linearmodels import RandomEffects
re_model6 = RandomEffects.from_formula('Life_Expectancy ~ Annual_CO2_emissions +health_expenditure_per_capita + GDP_per_capita + Military_Expenditure + Infant_Mortality_Rate', data=df).fit()
print(re_model6.summary)

from linearmodels import RandomEffects
re_model7 = RandomEffects.from_formula('Life_Expectancy ~ 1 + Annual_CO2_emissions + GDP_per_capita + Infant_Mortality_Rate + health_expenditure_per_capita', data=df).fit()
print(re_model7.summary)

!pip install linearmodels --upgrade

!pip install numpy==1.24.3

!pip install pydynpd --upgrade
!pip install arch
import statsmodels
import arch
import pydynpd
from pydynpd import regression
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.stattools import kpss
from statsmodels.tsa.stattools import acf, pacf
from arch.unitroot import PhillipsPerron, KPSS, ADF # PhillipsPerson has been renamed to PhillipsPerron

df.head()

df = df.reset_index(drop=False)
df1 = df1.reset_index(drop=False)
df2 = df2.reset_index(drop=False)
df.head(20)

# df = df.reset_index(drop=False)
# df.head(20)
command_str = ('Life_Expectancy L1.Life_Expectancy Annual_CO2_emissions GDP_per_capita  '
               'Military_Expenditure Infant_Mortality_Rate health_expenditure_per_capita | '
               'gmm(Life_Expectancy, 2:4) iv(Annual_CO2_emissions GDP_per_capita '
               'Military_Expenditure Infant_Mortality_Rate health_expenditure_per_capita) | nolevel collapse')

mydpd = regression.abond(command_str, df, ['Code', 'Year'])

#developed
command_str = ('Life_Expectancy L1.Life_Expectancy Annual_CO2_emissions GDP_per_capita  '
               'Military_Expenditure Infant_Mortality_Rate health_expenditure_per_capita | '
               'gmm(Life_Expectancy, 2:4) iv(Annual_CO2_emissions GDP_per_capita '
               'Military_Expenditure Infant_Mortality_Rate health_expenditure_per_capita) | nolevel collapse')

mydpd = regression.abond(command_str, df1, ['Code', 'Year'])

#developing
command_str = ('Life_Expectancy L1.Life_Expectancy Annual_CO2_emissions GDP_per_capita  '
               'Military_Expenditure Infant_Mortality_Rate health_expenditure_per_capita | '
               'gmm(Life_Expectancy, 2:4) iv(Annual_CO2_emissions GDP_per_capita '
               'Military_Expenditure Infant_Mortality_Rate health_expenditure_per_capita) | nolevel collapse')

mydpd = regression.abond(command_str, df2, ['Code', 'Year'])

command_str = ('Life_Expectancy L1.Life_Expectancy Annual_CO2_emissions GDP_per_capita '
               'Military_Expenditure Infant_Mortality_Rate health_expenditure_per_capita | '
               'gmm(Life_Expectancy, 2:4) iv(Annual_CO2_emissions GDP_per_capita '
               'Military_Expenditure Infant_Mortality_Rate health_expenditure_per_capita) | collapse')

mydpd = regression.abond(command_str, df, ['Code', 'Year'])

#developed
command_str = ('Life_Expectancy L1.Life_Expectancy Annual_CO2_emissions GDP_per_capita '
               'Military_Expenditure Infant_Mortality_Rate health_expenditure_per_capita | '
               'gmm(Life_Expectancy, 2:4) iv(Annual_CO2_emissions GDP_per_capita '
               'Military_Expenditure Infant_Mortality_Rate health_expenditure_per_capita) | collapse')

mydpd = regression.abond(command_str, df1, ['Code', 'Year'])

#developing
command_str = ('Life_Expectancy L1.Life_Expectancy Annual_CO2_emissions GDP_per_capita '
               'Military_Expenditure Infant_Mortality_Rate health_expenditure_per_capita | '
               'gmm(Life_Expectancy, 2:4) iv(Annual_CO2_emissions GDP_per_capita '
               'Military_Expenditure Infant_Mortality_Rate health_expenditure_per_capita) | collapse')

mydpd = regression.abond(command_str, df2, ['Code', 'Year'])

